[{"/Users/piyush/RevUC/lattice/src/index.tsx":"1","/Users/piyush/RevUC/lattice/src/serviceWorker.ts":"2","/Users/piyush/RevUC/lattice/src/App.tsx":"3","/Users/piyush/RevUC/lattice/src/layout/Layout.tsx":"4","/Users/piyush/RevUC/lattice/src/layout/Providers.tsx":"5","/Users/piyush/RevUC/lattice/src/layout/Routes.tsx":"6","/Users/piyush/RevUC/lattice/src/layout/AppRoute.tsx":"7","/Users/piyush/RevUC/lattice/src/layout/AuthRoute.tsx":"8","/Users/piyush/RevUC/lattice/src/providers/AuthProvider.tsx":"9","/Users/piyush/RevUC/lattice/src/providers/ProfileProvider.tsx":"10","/Users/piyush/RevUC/lattice/src/providers/ProfileListProvider.tsx":"11","/Users/piyush/RevUC/lattice/src/providers/MatchProvider.tsx":"12","/Users/piyush/RevUC/lattice/src/providers/NotificationProvider.tsx":"13","/Users/piyush/RevUC/lattice/src/providers/LatticeThemeProvider.tsx":"14","/Users/piyush/RevUC/lattice/src/pages/auth/Login.tsx":"15","/Users/piyush/RevUC/lattice/src/pages/auth/Register.tsx":"16","/Users/piyush/RevUC/lattice/src/pages/profile/Profile.tsx":"17","/Users/piyush/RevUC/lattice/src/pages/home/Home.tsx":"18","/Users/piyush/RevUC/lattice/src/pages/auth/Reset.tsx":"19","/Users/piyush/RevUC/lattice/src/pages/profile/ChangeProfile.tsx":"20","/Users/piyush/RevUC/lattice/src/pages/notifications/Notifications.tsx":"21","/Users/piyush/RevUC/lattice/src/services/AuthService.ts":"22","/Users/piyush/RevUC/lattice/src/services/PushService.ts":"23","/Users/piyush/RevUC/lattice/src/services/ProfileService.ts":"24","/Users/piyush/RevUC/lattice/src/services/NotificationService.ts":"25","/Users/piyush/RevUC/lattice/src/services/MatchService.ts":"26","/Users/piyush/RevUC/lattice/src/layout/Navigation.tsx":"27","/Users/piyush/RevUC/lattice/src/components/PromiseButton.tsx":"28","/Users/piyush/RevUC/lattice/src/components/Spinner.tsx":"29","/Users/piyush/RevUC/lattice/src/pages/auth/dialogs/reset-request.tsx":"30","/Users/piyush/RevUC/lattice/src/pages/auth/dialogs/reset-request-alert.tsx":"31","/Users/piyush/RevUC/lattice/src/components/DialogControl.hook.tsx":"32","/Users/piyush/RevUC/lattice/src/pages/profile/dialogs/profile-save-confirmation.tsx":"33","/Users/piyush/RevUC/lattice/src/pages/profile/dialogs/change-password.tsx":"34","/Users/piyush/RevUC/lattice/src/pages/profile/dialogs/logout-confirmation.tsx":"35","/Users/piyush/RevUC/lattice/src/tours/ProfileTour.tsx":"36","/Users/piyush/RevUC/lattice/src/pages/profile/dialogs/change-password-alert.tsx":"37","/Users/piyush/RevUC/lattice/src/pages/home/dialogs/toggle-visibility-confirmation.tsx":"38","/Users/piyush/RevUC/lattice/src/pages/profile/dialogs/toggle-visibility-alert.tsx":"39","/Users/piyush/RevUC/lattice/src/pages/profile/dialogs/toggle-visibility-confirmation.tsx":"40","/Users/piyush/RevUC/lattice/src/pages/home/dialogs/toggle-visibility-alert.tsx":"41","/Users/piyush/RevUC/lattice/src/pages/home/dialogs/reset-alert.tsx":"42","/Users/piyush/RevUC/lattice/src/pages/notifications/dialogs/copied-alert.tsx":"43","/Users/piyush/RevUC/lattice/src/pages/notifications/dialogs/notification-details.tsx":"44","/Users/piyush/RevUC/lattice/src/pages/auth/dialogs/reset-alert.tsx":"45","/Users/piyush/RevUC/lattice/src/pages/home/dialogs/reset-confirmation.tsx":"46","/Users/piyush/RevUC/lattice/src/pages/home/Deck.tsx":"47","/Users/piyush/RevUC/lattice/src/tours/ResetTour.tsx":"48","/Users/piyush/RevUC/lattice/src/tours/HomeTour.tsx":"49","/Users/piyush/RevUC/lattice/src/services/Api.ts":"50","/Users/piyush/RevUC/lattice/src/tours/NotificationTour.tsx":"51","/Users/piyush/RevUC/lattice/src/tours/TourComponent.tsx":"52","/Users/piyush/RevUC/lattice/src/pages/home/Card.tsx":"53","/Users/piyush/RevUC/lattice/src/components/Wave.tsx":"54"},{"size":223,"mtime":1608476150411,"results":"55","hashOfConfig":"56"},{"size":5590,"mtime":1608476150422,"results":"57","hashOfConfig":"56"},{"size":159,"mtime":1608476150409,"results":"58","hashOfConfig":"56"},{"size":214,"mtime":1608476150412,"results":"59","hashOfConfig":"56"},{"size":967,"mtime":1608476150413,"results":"60","hashOfConfig":"56"},{"size":1510,"mtime":1608476150413,"results":"61","hashOfConfig":"56"},{"size":485,"mtime":1609193364248,"results":"62","hashOfConfig":"56"},{"size":367,"mtime":1608476150412,"results":"63","hashOfConfig":"56"},{"size":3125,"mtime":1608476150420,"results":"64","hashOfConfig":"56"},{"size":2161,"mtime":1608476150421,"results":"65","hashOfConfig":"56"},{"size":1994,"mtime":1608476150421,"results":"66","hashOfConfig":"56"},{"size":1333,"mtime":1608476150421,"results":"67","hashOfConfig":"56"},{"size":2899,"mtime":1608476150421,"results":"68","hashOfConfig":"56"},{"size":394,"mtime":1608476150420,"results":"69","hashOfConfig":"56"},{"size":5308,"mtime":1609193278832,"results":"70","hashOfConfig":"56"},{"size":6577,"mtime":1608476150414,"results":"71","hashOfConfig":"56"},{"size":6851,"mtime":1608476150419,"results":"72","hashOfConfig":"56"},{"size":6174,"mtime":1608476150416,"results":"73","hashOfConfig":"56"},{"size":5973,"mtime":1608476150415,"results":"74","hashOfConfig":"56"},{"size":9940,"mtime":1608476150418,"results":"75","hashOfConfig":"56"},{"size":4138,"mtime":1608476150417,"results":"76","hashOfConfig":"56"},{"size":2636,"mtime":1608476150422,"results":"77","hashOfConfig":"56"},{"size":2275,"mtime":1608476150423,"results":"78","hashOfConfig":"56"},{"size":2618,"mtime":1608476150423,"results":"79","hashOfConfig":"56"},{"size":866,"mtime":1608476150423,"results":"80","hashOfConfig":"56"},{"size":832,"mtime":1608476150423,"results":"81","hashOfConfig":"56"},{"size":1656,"mtime":1608476150413,"results":"82","hashOfConfig":"56"},{"size":678,"mtime":1608476150410,"results":"83","hashOfConfig":"56"},{"size":1198,"mtime":1609193151469,"results":"84","hashOfConfig":"56"},{"size":1625,"mtime":1608476150416,"results":"85","hashOfConfig":"56"},{"size":1127,"mtime":1608476150415,"results":"86","hashOfConfig":"56"},{"size":350,"mtime":1608476150410,"results":"87","hashOfConfig":"56"},{"size":923,"mtime":1608476150419,"results":"88","hashOfConfig":"56"},{"size":3334,"mtime":1608476150419,"results":"89","hashOfConfig":"56"},{"size":1056,"mtime":1608476150419,"results":"90","hashOfConfig":"56"},{"size":1177,"mtime":1608476150426,"results":"91","hashOfConfig":"56"},{"size":1047,"mtime":1608476150419,"results":"92","hashOfConfig":"56"},{"size":1132,"mtime":1608476150417,"results":"93","hashOfConfig":"56"},{"size":906,"mtime":1608476150419,"results":"94","hashOfConfig":"56"},{"size":1087,"mtime":1608476150420,"results":"95","hashOfConfig":"56"},{"size":919,"mtime":1608476150417,"results":"96","hashOfConfig":"56"},{"size":927,"mtime":1608476150416,"results":"97","hashOfConfig":"56"},{"size":938,"mtime":1608476150418,"results":"98","hashOfConfig":"56"},{"size":3811,"mtime":1608476150418,"results":"99","hashOfConfig":"56"},{"size":969,"mtime":1608476150415,"results":"100","hashOfConfig":"56"},{"size":1133,"mtime":1608476150417,"results":"101","hashOfConfig":"56"},{"size":2737,"mtime":1608476150416,"results":"102","hashOfConfig":"56"},{"size":925,"mtime":1608476150426,"results":"103","hashOfConfig":"56"},{"size":1447,"mtime":1608476150425,"results":"104","hashOfConfig":"56"},{"size":238,"mtime":1609193405581,"results":"105","hashOfConfig":"56"},{"size":891,"mtime":1608476150425,"results":"106","hashOfConfig":"56"},{"size":552,"mtime":1608476150426,"results":"107","hashOfConfig":"56"},{"size":3616,"mtime":1608476150416,"results":"108","hashOfConfig":"56"},{"size":821,"mtime":1609193215792,"results":"109","hashOfConfig":"56"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},"14eo68p",{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"112"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"112"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"112"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"112"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"112"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"112"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"112"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"112"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"112"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"112"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"112"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"180","messages":"181","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"112"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"112"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"112"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"112"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"112"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"112"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"112"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"112"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"112"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"112"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"112"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"112"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"112"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"112"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"112"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"112"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"112"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"112"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"112"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"241","messages":"242","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"112"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246","usedDeprecatedRules":"112"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/piyush/RevUC/lattice/src/index.tsx",[],["251","252"],"/Users/piyush/RevUC/lattice/src/serviceWorker.ts",[],"/Users/piyush/RevUC/lattice/src/App.tsx",[],"/Users/piyush/RevUC/lattice/src/layout/Layout.tsx",[],"/Users/piyush/RevUC/lattice/src/layout/Providers.tsx",[],"/Users/piyush/RevUC/lattice/src/layout/Routes.tsx",[],"/Users/piyush/RevUC/lattice/src/layout/AppRoute.tsx",[],"/Users/piyush/RevUC/lattice/src/layout/AuthRoute.tsx",[],"/Users/piyush/RevUC/lattice/src/providers/AuthProvider.tsx",[],"/Users/piyush/RevUC/lattice/src/providers/ProfileProvider.tsx",[],"/Users/piyush/RevUC/lattice/src/providers/ProfileListProvider.tsx",[],"/Users/piyush/RevUC/lattice/src/providers/MatchProvider.tsx",[],"/Users/piyush/RevUC/lattice/src/providers/NotificationProvider.tsx",[],"/Users/piyush/RevUC/lattice/src/providers/LatticeThemeProvider.tsx",[],"/Users/piyush/RevUC/lattice/src/pages/auth/Login.tsx",[],"/Users/piyush/RevUC/lattice/src/pages/auth/Register.tsx",["253"],"import React, { useEffect, useState } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport { useForm } from 'react-hook-form';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport MailOutlineIcon from '@material-ui/icons/MailOutline';\nimport PassOutlinedIcon from '@material-ui/icons/VpnKeyOutlined';\nimport { Button, Container, Box } from '@material-ui/core';\n\nimport { useAuth } from '../../providers/AuthProvider';\n\nimport \"../../styles/Form.scss\"\nimport Spinner from '../../components/Spinner';\n\ninterface RegisterForm {\n  email: string\n  password: string\n  confirmPassword: string\n};\n\nconst useStyles = makeStyles((theme) => ({\n  margin: {\n    margin: theme.spacing(1)\n  }\n}));\n\nexport default function () {\n  const classes = useStyles();\n  const { getRegistrantEmail, register } = useAuth();\n  const { registrantId } = useParams<{ registrantId: string }>();\n\n  const { register: registerInput, handleSubmit, setValue, errors, watch } = useForm<RegisterForm>();\n\n  const [ isLoading, setLoading ] = useState(true);\n  const [ failedToLoad, setFailedToLoad ] = useState<Error>();\n  const [ email, setEmail ] = useState<string>();\n  const [ isSubmitting, setSubmitting ] = useState(false);\n  const [ failedToSubmit, setFailedToSubmit ] = useState<Error>();\n\n  useEffect(() => {\n    (async function () {\n      try {\n        const email = await getRegistrantEmail(registrantId);\n        setEmail(email);\n      } catch (err) {\n        setFailedToLoad(err);\n      } finally {\n        setLoading(false);\n      }\n    })();\n  }, [getRegistrantEmail, registrantId, setValue]);\n\n  const onSubmit = async (data: RegisterForm) => {\n    try {\n      setSubmitting(true);\n      await register(registrantId, data.password);\n    } catch (err) {\n      setFailedToSubmit(err);\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  const password = watch(`password`);\n\n  return (\n    <Container /* className={classes.root} */>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <div className=\"bg-white mv3 mv5-ns pa3 ph5-ns br3\">\n          {isLoading ? <h1 className=\"title\">Loading...</h1> :\n            failedToLoad ?\n              <Box color=\"error.main\" textAlign=\"center\">\n                <h3>{failedToLoad.message}</h3>\n              </Box> :\n              <>\n                <h1 className=\"title\">Create Account</h1>\n                <Box color=\"error.main\" textAlign=\"center\">{failedToSubmit && failedToSubmit.message}</Box>\n                <div className={classes.margin + \" font-opensans\"}>\n                  <Grid container spacing={4} className=\"lattice-form-band\" alignItems=\"flex-end\">\n                    <Grid className=\"lattice-icon\" item>\n                      <MailOutlineIcon />\n                    </Grid>\n                    <p className=\"lattice-form-label mb0 font-gray\">Email Address</p>\n                    <Grid item className=\"lattice-form-input\">\n                      <TextField\n                        name=\"email\"\n                        type=\"email\"\n                        id=\"input-with-icon-grid\"\n                        variant=\"outlined\"\n                        disabled={true}\n                        value={email}\n                        inputRef={registerInput({ required: `Invalid email, please check the link provided` })}\n                        fullWidth\n                      />\n                      {errors.email &&\n                        <Box color=\"error.main\">{errors.email.message}</Box>\n                      }\n                    </Grid>\n                  </Grid>\n                  <Grid container spacing={4} className=\"lattice-form-band\" alignItems=\"flex-end\">\n                    <Grid item className=\"lattice-icon\">\n                      <PassOutlinedIcon />\n                    </Grid>\n                    <p className=\"lattice-form-label mb0 font-gray\">Password</p>\n                    <Grid item className=\"lattice-form-input\">\n                      <TextField\n                        name=\"password\"\n                        type=\"password\"\n                        id=\"input-with-icon-grid\"\n                        variant=\"outlined\"\n                        fullWidth\n                        inputRef={registerInput({\n                          required: `Please provide a password`,\n                          minLength: 6\n                        })}\n                      />\n                      {errors.password &&\n                        <Box color=\"error.main\">\n                          {errors.password?.message || `Password must be atleast 6 characters.`}\n                        </Box>\n                      }\n                    </Grid>\n                  </Grid>\n                  <Grid container spacing={4} className=\"lattice-form-band\" alignItems=\"flex-end\">\n                    <Grid item className=\"lattice-icon\">\n                      <PassOutlinedIcon />\n                    </Grid>\n                    <p className=\"lattice-form-label mb0 font-gray\">Confirm Password</p>\n                    <Grid item className=\"lattice-form-input\">\n                      <TextField\n                        name=\"confirmPassword\"\n                        type=\"password\"\n                        id=\"input-with-icon-grid\"\n                        variant=\"outlined\"\n                        fullWidth\n                        inputRef={registerInput({\n                          validate: confirmPassword => password === confirmPassword\n                        })}\n                      />\n                      {errors.confirmPassword &&\n                        <Box color=\"error.main\">\n                          {errors.confirmPassword?.message || `Passwords must match.`}\n                        </Box>\n                      }\n                    </Grid>\n                  </Grid>\n                  <input type=\"hidden\" name=\"registrantId\" value={registrantId} />\n                  <Button\n                    type=\"submit\"\n                    variant=\"contained\"\n                    className=\"center\"\n                    color=\"primary\"\n                    disabled={isSubmitting}\n                  >\n                    {\n                      isSubmitting ? <Spinner size=\"25px\" /> : `Sign Up`\n                    }\n                  </Button>\n                  <Box className=\"mt4\">\n                    Already registered? Log in <Link to=\"/auth/login\">here</Link>\n                  </Box>\n                </div>\n              </>\n          }\n        </div>\n      </form>\n    </Container>\n  );\n}\n","/Users/piyush/RevUC/lattice/src/pages/profile/Profile.tsx",["254"],"import React, { useState } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport Grid from '@material-ui/core/Grid';\nimport PersonIcon from '@material-ui/icons/Person';\n// import SlackIcon from '@material-ui/icons/AlternateEmail';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff';\n// import MailOutlineIcon from '@material-ui/icons/MailOutline';\nimport { Button, Container } from '@material-ui/core';\n\nimport { useAuth } from '../../providers/AuthProvider';\nimport { useProfile } from '../../providers/ProfileProvider';\nimport { useNotification } from '../../providers/NotificationProvider';\nimport useDialogControl from '../../components/DialogControl.hook';\nimport PromiseButton from '../../components/PromiseButton';\nimport ProfileTour from '../../tours/ProfileTour';\nimport ToggleVisibilityConfirmation from './dialogs/toggle-visibility-confirmation';\nimport ToggleVisibilityAlert from './dialogs/toggle-visibility-alert';\nimport ChangePassword, { ChangePasswordForm } from './dialogs/change-password';\nimport ChangePasswordAlert from './dialogs/change-password-alert';\nimport LogoutConfirmation from './dialogs/logout-confirmation';\n\nimport '../../styles/Profile.scss'\n\nexport default function() {\n  const { logout, changePassword } = useAuth();\n  const { isLoading, profile, toggleVisibility } = useProfile();\n  const { pushPermission, requestNotificationPermission } = useNotification();\n\n  const toggleVisibilityConfirmationDialog = useDialogControl();\n  const toggleVisibilityAlertDialog = useDialogControl();\n  const changePasswordDialog = useDialogControl();\n  const changePasswordAlertDialog = useDialogControl();\n  const logoutConfirmationDialog = useDialogControl();\n\n  const [ redirect, setRedirect ] = useState<string>();\n\n  const redirectToProfileForm = () => setRedirect(`/profile/edit`);\n\n  const onToggleVisibility = async () => {\n    await toggleVisibility();\n    toggleVisibilityConfirmationDialog.dismiss();\n    toggleVisibilityAlertDialog.open();\n  };\n\n  const onPasswordChange = async (data: ChangePasswordForm) => {\n    try {\n      await changePassword(data.oldPassword, data.newPassword);\n    } catch(err) {\n      changePasswordAlertDialog.setState(err);\n    } finally {\n      changePasswordDialog.dismiss();\n      changePasswordAlertDialog.open();\n    }\n  };\n\n  const onLogout = async () => {\n    await logout();\n    logoutConfirmationDialog.dismiss();\n  };\n\n  return (\n    <Container className=\"nav-bar-margin\">\n      <div className=\"bg-white mv3 mv5-ns pa3 ph5-ns br3\">\n        <h1 className=\"title\">Lattice Account</h1>\n          {isLoading ? `Loading...` :\n            <>\n              <div className=\"mb4\">\n                <Grid container spacing={4} className=\"mb3 lattice-form-band\" alignItems=\"flex-end\">\n                  <Grid className=\"lattice-icon\" item>\n                    <PersonIcon />\n                  </Grid>\n                  <p className=\"lattice-form-label mb0 font-gray\">{profile?.name}</p>\n                </Grid>\n                {/* <Grid container spacing={4} className=\"mb3 lattice-form-band\" alignItems=\"flex-end\">\n                  <Grid className=\"lattice-icon\" item>\n                    <MailOutlineIcon />\n                  </Grid>\n                  <p className=\"lattice-form-label mb0 font-gray\">{profile?.email}</p>\n                </Grid>\n                <Grid container spacing={4} className=\"mb3 lattice-form-band\" alignItems=\"flex-end\">\n                  <Grid item className=\"lattice-icon\">\n                    <SlackIcon />\n                  </Grid>\n                  <p className=\"lattice-form-label mb0 font-gray\">{profile?.slack}</p>\n                </Grid> */}\n              </div>\n\n              <Button\n                variant=\"contained\"\n                className=\"center profile-button edit-profile-button\"\n                color=\"primary\"\n                onClick={redirectToProfileForm}\n              >Edit Profile</Button>\n\n              <Button\n                variant=\"contained\"\n                className=\"center profile-button toggle-visibility-button\"\n                color=\"primary\"\n                onClick={toggleVisibilityConfirmationDialog.open}\n              >\n                {profile?.visible ?\n                  <>\n                    <VisibilityIcon /> &nbsp; Mark Not Visible\n                  </> :\n                  <>\n                    <VisibilityOffIcon /> &nbsp; Mark Visible\n                  </>\n                }\n              </Button>\n\n              {\n                pushPermission === `granted` ? null :\n                  <PromiseButton\n                    variant=\"contained\"\n                    className=\"center profile-button notification-request-button\"\n                    color={pushPermission === `denied` ? `secondary` : `primary`}\n                    onClick={requestNotificationPermission}\n                    disabled={pushPermission === `denied`}\n                  >\n                    {\n                      pushPermission === `default` ?\n                        `Enable Push Notification` :\n                        `Push Notification Permission Denied`\n                    }\n                  </PromiseButton>\n              }\n\n              <Button\n                variant=\"contained\"\n                className=\"center profile-button\"\n                color=\"primary\"\n                onClick={changePasswordDialog.open}\n              >Change Password</Button>\n\n              <Button\n                variant=\"contained\"\n                className=\"center profile-button\"\n                color=\"primary\"\n                onClick={logoutConfirmationDialog.open}\n              >Logout</Button>\n            </>\n          }\n          <ToggleVisibilityConfirmation\n            show={toggleVisibilityConfirmationDialog.show}\n            onClose={toggleVisibilityConfirmationDialog.dismiss}\n            onSuccess={onToggleVisibility}\n            visible={profile?.visible}\n          />\n          <ToggleVisibilityAlert\n            show={toggleVisibilityAlertDialog.show}\n            onClose={toggleVisibilityAlertDialog.dismiss}\n            visible={profile?.visible}\n          />\n          <ChangePassword\n            show={changePasswordDialog.show}\n            onClose={changePasswordDialog.dismiss}\n            onSuccess={onPasswordChange}\n          />\n          <ChangePasswordAlert\n            show={changePasswordAlertDialog.show}\n            onClose={changePasswordAlertDialog.dismiss}\n            error={changePasswordAlertDialog.state}\n          />\n          <LogoutConfirmation\n            show={logoutConfirmationDialog.show}\n            onClose={logoutConfirmationDialog.dismiss}\n            onSuccess={onLogout}\n          />\n          {redirect && <Redirect to={redirect} />}\n      </div>\n      <ProfileTour />\n    </Container>\n  );\n};\n","/Users/piyush/RevUC/lattice/src/pages/home/Home.tsx",["255"],"import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Container, Button } from \"@material-ui/core\";\n\nimport { useProfile } from \"../../providers/ProfileProvider\";\nimport { useProfileList } from \"../../providers/ProfileListProvider\";\nimport { useMatch } from \"../../providers/MatchProvider\";\nimport Spinner from \"../../components/Spinner\";\nimport useDialogControl from '../../components/DialogControl.hook';\nimport HomeTour from '../../tours/HomeTour';\nimport ResetTour from \"../../tours/ResetTour\";\nimport Deck from \"./Deck\";\nimport ResetConfirmation from './dialogs/reset-confirmation';\nimport ResetAlert from './dialogs/reset-alert';\nimport ToggleVisibilityConfirmation from './dialogs/toggle-visibility-confirmation';\nimport ToggleVisibilityAlert from './dialogs/toggle-visibility-alert';\nimport { HydratedProfile } from \"../../interfaces/profile\";\nimport { WrapperComponent } from \"../../interfaces/wrapper\";\n\nexport default function () {\n  const profileState = useProfile();\n  const profileListState = useProfileList();\n\n  const [ hydratedProfiles, setHydratedProfiles ] = useState<Array<HydratedProfile>>();\n\n  const { profile } = profileState;\n  const { isLoading, skills, profiles } = profileListState;\n\n  useEffect(() => {\n    if(skills.length) {\n      const hydratedProfiles = profiles.map((profile): HydratedProfile => {\n        const profileSkills = skills.filter(skill => profile?.skills?.includes(skill.title));\n        const profileLookingFor = skills.filter(skill => profile?.lookingFor?.includes(skill.title));\n    \n        return { ...profile, skills: profileSkills, lookingFor: profileLookingFor };\n      });\n\n      setHydratedProfiles(hydratedProfiles);\n    }\n  }, [ profiles, skills ]);\n\n  return (\n    <>\n      <LoadingText />\n      <SetupText />\n      <ResetText />\n      <ErrorText />\n\n      {profile?.visible && !isLoading && !!hydratedProfiles?.length &&\n        <>\n          <Deck data={hydratedProfiles} />\n          <HomeTour />\n        </>\n      }\n\n    </>\n  );\n};\n\nconst TextBox: WrapperComponent = ({ children }) => {\n  return <Container className=\"nav-bar-margin\">\n    <div className=\"bg-white mv3 mv5-ns pa3 ph5-ns br3\">\n      {children}\n    </div>\n  </Container>;\n};\n\nconst SetupText = () => {\n  const { isLoading, failedToLoad, profile } = useProfile();\n\n  return (\n    (!isLoading && !failedToLoad) ? (\n      !profile?.started ? \n      <TextBox>\n        Welcome! Let's get you set up. Head over to your <Link to=\"/profile/edit\">profile page</Link> to get started.\n      </TextBox> :\n  \n      !profile.completed ?\n      <TextBox>\n        Welcome back! Head over to your <Link to=\"/profile/edit\">profile page</Link> to complete your profile and start searching for potential teammates!\n      </TextBox> :\n  \n      !profile.visible ?\n      <TextBox>\n        Welcome back! Mark your profile \"visible\" from your <Link to=\"/profile\">profile page</Link> to start searching for potential teammates!\n      </TextBox> : null\n    ) : null\n  );\n};\n\nfunction LoadingText() {\n  const profileState = useProfile();\n  const profileListState = useProfileList();\n\n  return (\n    profileState.isLoading ?\n    <TextBox>\n      Fetching your profile... <br /> <Spinner />\n    </TextBox> :\n\n    profileListState.isLoading ?\n    <TextBox>\n      Finding the best hackers for you... <br /> <Spinner />\n    </TextBox> : null\n  );\n};\n\nfunction ResetText() {\n  const { profile, toggleVisibility } = useProfile();\n  const { isLoading, profiles } = useProfileList();\n  const { reset } = useMatch();\n\n  const resetConfirmationDialog = useDialogControl();\n  const resetAlertDialog = useDialogControl();\n  const toggleVisibilityConfirmationDialog = useDialogControl();\n  const toggleVisibilityAlertDialog = useDialogControl();\n\n  const onReset = async () => {\n    await reset();\n    resetConfirmationDialog.dismiss();\n    resetAlertDialog.open();\n  };\n\n  const onToggleVisibility = async () => {\n    await toggleVisibility();\n    toggleVisibilityConfirmationDialog.dismiss();\n    toggleVisibilityAlertDialog.open();\n  };\n\n  return (\n    (profile?.visible && !isLoading && !profiles.length) ?\n    <>\n      <TextBox>\n        <p>\n          That's everybody! If you still haven't found your teammates, you can reset all your left swipes and start over.\n        </p>\n        <Button\n          className=\"reset-button\"\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={resetConfirmationDialog.open}\n        >Reset</Button>\n\n        <p>\n          Or if you have already found your teammates, you can mark your profile as not visible.\n        </p>\n        <Button\n          className=\"mark-not-visibile-button\"\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={toggleVisibilityConfirmationDialog.open}\n        >Mark not visible</Button>\n\n        <p className=\"wait-text\">\n          Or you can just wait for more people to join Lattice!\n        </p>\n\n        <ResetTour />\n      </TextBox>\n      <ResetConfirmation\n        show={resetConfirmationDialog.show}\n        onClose={resetConfirmationDialog.dismiss}\n        onSuccess={onReset}\n      />\n      <ResetAlert\n        show={resetAlertDialog.show}\n        onClose={resetAlertDialog.dismiss}\n      />\n      <ToggleVisibilityConfirmation\n        show={toggleVisibilityConfirmationDialog.show}\n        onClose={toggleVisibilityConfirmationDialog.dismiss}\n        onSuccess={onToggleVisibility}\n      />\n      <ToggleVisibilityAlert\n        show={toggleVisibilityAlertDialog.show}\n        onClose={toggleVisibilityAlertDialog.dismiss}\n      />\n    </>: null\n  );\n};\n\nfunction ErrorText() {\n  const profileState = useProfile();\n  const profileListState = useProfileList();\n\n  return (\n    profileState.failedToLoad ?\n    <TextBox>\n      There was an error fetching your profile <br />\n      <Button variant=\"contained\" color=\"primary\" onClick={profileState.getProfile}>Retry</Button>\n    </TextBox> :\n\n    profileListState.failedToLoad ?\n    <TextBox>\n      There was an error fetching hackers <br />\n      <Button variant=\"contained\" color=\"primary\" onClick={profileListState.getProfiles}>Retry</Button>\n    </TextBox> : null\n  );\n};\n","/Users/piyush/RevUC/lattice/src/pages/auth/Reset.tsx",["256"],"import React, { useEffect, useState } from 'react';\nimport { Redirect, useParams } from 'react-router-dom';\nimport { useForm } from 'react-hook-form';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport MailOutlineIcon from '@material-ui/icons/MailOutline';\nimport { Button, Container, Box } from '@material-ui/core';\nimport PassOutlinedIcon from '@material-ui/icons/VpnKeyOutlined';\nimport { useAuth } from '../../providers/AuthProvider';\nimport Spinner from '../../components/Spinner';\nimport useDialogControl from '../../components/DialogControl.hook';\nimport ResetAlert from './dialogs/reset-alert';\n\ninterface ResetPasswordForm {\n  email: string\n  password: string\n  confirmPassword: string\n};\n\nexport default function () {\n  const { resetToken } = useParams<{ resetToken: string }>();\n  const { getResetInfo, resetPassword } = useAuth();\n  const resetAlertDialog = useDialogControl();\n\n  const { register, handleSubmit, setValue, errors, watch } = useForm<ResetPasswordForm>();\n\n  const [ isLoading, setLoading ] = useState(true);\n  const [ failedToLoad, setFailedToLoad ] = useState<Error>();\n  const [ isSubmitting, setSubmitting ] = useState(false);\n  const [ failedToSubmit, setFailedToSubmit ] = useState<Error>();\n  const [ redirect, setRedirect ] = useState(``);\n\n  const onSubmit = async (data: ResetPasswordForm) => {\n    try {\n      setSubmitting(true);\n      await resetPassword(resetToken, data.password);\n    } catch (err) {\n      setFailedToSubmit(err);\n    } finally {\n      setSubmitting(false);\n      resetAlertDialog.open();\n    }\n  };\n\n  const done = () => {\n    resetAlertDialog.dismiss();\n    setRedirect(`/auth/login`);\n  };\n\n  useEffect(() => {\n    (async function () {\n      try {\n        const email = await getResetInfo(resetToken);\n        setValue(`email`, email);\n      } catch (err) {\n        setFailedToLoad(err);\n      } finally {\n        setLoading(false);\n      }\n    })();\n  }, [getResetInfo, resetToken, setValue]);\n\n  const password = watch(`password`);\n\n  return (\n    <Container>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <div className=\"bg-white mv3 mv5-ns pa3 ph5-ns br3\">\n        {isLoading ? <h1 className=\"title\">Loading...</h1> :\n          failedToLoad ?\n            <Box color=\"error.main\" textAlign=\"center\">\n              <h3>{failedToLoad.message}</h3>\n            </Box> :\n            <>\n              <h1 className=\"title\">Reset Password</h1>\n              <Box color=\"error.main\" textAlign=\"center\">{failedToSubmit?.message}</Box>\n              <div className=\"mb4\">\n                <Grid container spacing={4} className=\"mb3 lattice-form-band\" alignItems=\"flex-end\">\n                  <Grid className=\"lattice-icon\" item>\n                    <MailOutlineIcon />\n                  </Grid>\n                  <p className=\"lattice-form-label mb0 font-gray\">Email Address</p>\n                  <Grid item className=\"lattice-form-input\">\n                    <TextField\n                      name=\"email\"\n                      type=\"email\"\n                      variant=\"outlined\"\n                      fullWidth\n                      disabled={true}\n                      inputRef={register({ required: `Invalid email, please check the link provided` })}\n                    />\n                  </Grid>\n                </Grid>\n                <Grid container spacing={4} className=\"lattice-form-band\" alignItems=\"flex-end\">\n                  <Grid item className=\"lattice-icon\">\n                    <PassOutlinedIcon />\n                  </Grid>\n                  <p className=\"lattice-form-label mb0 font-gray\">New Password</p>\n                  <Grid item className=\"lattice-form-input\">\n                    <TextField\n                      name=\"password\"\n                      type=\"password\"\n                      variant=\"outlined\"\n                      fullWidth\n                      inputRef={register({\n                        required: `Please provide a password`,\n                        minLength: 6\n                      })}\n                    />\n                    {errors.password &&\n                      <Box color=\"error.main\">\n                        {errors.password?.message || `Password must be atleast 6 characters.`}\n                      </Box>\n                    }\n                  </Grid>\n                </Grid>\n                <Grid container spacing={4} className=\"lattice-form-band\" alignItems=\"flex-end\">\n                  <Grid item className=\"lattice-icon\">\n                    <PassOutlinedIcon />\n                  </Grid>\n                  <p className=\"lattice-form-label mb0 font-gray\">Confirm New Password</p>\n                  <Grid item className=\"lattice-form-input\">\n                    <TextField\n                      name=\"confirmPassword\"\n                      type=\"password\"\n                      variant=\"outlined\"\n                      fullWidth\n                      inputRef={register({\n                        validate: confirmPassword => password === confirmPassword\n                      })}\n                    />\n                    {errors.confirmPassword &&\n                      <Box color=\"error.main\">\n                        {errors.confirmPassword?.message || `Passwords must match.`}\n                      </Box>\n                    }\n                  </Grid>\n                </Grid>\n                <Button\n                  type=\"submit\" \n                  variant=\"contained\"\n                  className=\"center\" \n                  color=\"primary\"\n                  disabled={isSubmitting}\n                >\n                  {\n                    isSubmitting ? <Spinner size=\"25px\" /> : `Submit`\n                  }\n                </Button>\n              </div>\n            </>\n        }\n        </div>\n      </form>\n      <ResetAlert\n        show={resetAlertDialog.show}\n        onClose={done}\n      />\n      {redirect && <Redirect to={redirect} />}\n    </Container>\n  );\n}\n","/Users/piyush/RevUC/lattice/src/pages/profile/ChangeProfile.tsx",["257"],"import React, { useEffect, useState } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { useForm } from 'react-hook-form';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport SlackIcon from '@material-ui/icons/AlternateEmail';\nimport PersonIcon from '@material-ui/icons/Person';\nimport DescriptionIcon from '@material-ui/icons/Description';\nimport { Button, Container, InputAdornment, Box } from '@material-ui/core';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { AssignmentTurnedIn } from \"@material-ui/icons\";\n\nimport { useProfile } from \"../../providers/ProfileProvider\";\nimport ConfirmationDialog from './dialogs/profile-save-confirmation';\n\nimport \"../../styles/Form.scss\"\nimport { useProfileList } from '../../providers/ProfileListProvider';\nimport Spinner from '../../components/Spinner';\n\nconst useStyles = makeStyles((theme) => ({\n  margin: {\n    margin: theme.spacing(1)\n  }\n}));\n\nexport default function() {\n  const classes = useStyles();\n  const { isLoading, profile, updateProfile } = useProfile();\n  const { skills } = useProfileList();\n  const { register, setValue, handleSubmit, errors, reset, watch } = useForm();\n\n  const [ isSubmitting, setSubmitting ] = useState(false);\n  const [ failedToSubmit, setFailedToSubmit ] = useState<string>();\n  const [ showConfirmationModal, setShowModal ] = useState(false);\n  const [ redirect, setRedirect ] = useState<string>();\n\n  useEffect(()=> {\n    register({ name: `skills` }, {\n      required: true,\n      validate: value => value.length <= 6\n    });\n    register({ name: `lookingFor` }, {\n      required: true,\n      validate: value => value.length <= 3\n    });\n  }, [ register ]);\n\n  useEffect(() => {\n    const profileSkills = skills?.filter(skill => profile?.skills?.includes(skill.title));\n    const profileLookingFor = skills?.filter(skill => profile?.lookingFor?.includes(skill.title));\n\n    reset({ ...profile, skills: profileSkills, lookingFor: profileLookingFor });\n  }, [ reset, skills, profile ]);\n\n  useEffect(() => {\n    setFailedToSubmit((!!Object.keys(errors).length) ? `Please fix the above errors` : undefined);\n  }, [ errors ]);\n\n  const onSubmit = async data => {\n    try {\n      setSubmitting(true);\n\n      const skills = data.skills.map(s => s.title);\n      const lookingFor = data.lookingFor.map(s => s.title);\n\n      await updateProfile({ ...data, skills, lookingFor });\n\n      setShowModal(true);\n    } catch(err) {\n      setFailedToSubmit(err.message);\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  const onModalDismiss = () => {\n    setShowModal(false);\n    setRedirect(`/profile`);\n  };\n\n  const profileSkills = watch(`skills`) || [];\n  const profileLookingFor = watch(`lookingFor`)|| [];\n\n  return (\n    <Container className={/* classes.root +  */\" nav-bar-margin\"}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <div className=\"bg-white mv3 mv5-ns pa3 ph5-ns br3\">\n          <h1 className=\"title\">Your Profile</h1>\n          {isLoading ? `Loading...` :\n            <>\n              <div className={classes.margin + \" font-opensans\"}>\n                <Grid container spacing={4} className=\"mb3 lattice-form-band\" alignItems=\"flex-end\">\n                  <Grid className=\"lattice-icon\" item>\n                    <PersonIcon />\n                  </Grid>\n                  <p className=\"lattice-form-label mb0 font-gray\">Full name</p>\n                  <Grid item className=\"lattice-form-input\">\n                    <TextField\n                      fullWidth\n                      name=\"name\"\n                      id=\"input-with-icon-grid\"\n                      variant=\"outlined\" \n                      placeholder=\"John Doe\"\n                      inputRef={register({ required: `This field is required` })}\n                      error={!!errors.name}\n                      helperText={errors.name?.message || `Every hacker needs a public identity.`}\n                    />\n                  </Grid>\n                </Grid>\n                <Grid container spacing={4} className=\"mb3 lattice-form-band\" alignItems=\"flex-end\">\n                  <Grid item className=\"lattice-icon\">\n                    <DescriptionIcon />\n                  </Grid>\n                  <p className=\"lattice-form-label mb0 font-gray\">Project Idea</p>\n                  <Grid item className=\"lattice-form-input\">\n                    <TextField\n                      fullWidth\n                      multiline\n                      name=\"idea\"\n                      id=\"input-with-icon-grid\"\n                      variant=\"outlined\"\n                      placeholder=\"A coronavirus map\"\n                      inputRef={register({ required: `This field is required`, maxLength: 250 })}\n                      error={!!errors.idea}\n                      helperText={\n                        errors.idea?.message ||\n                        (\n                          errors.idea?.type === `maxLength` ?\n                          `Please write no more than 250 characters` :\n                          `Share your innovative idea. It's fine if you don't have one.`\n                        )\n                      }\n                    />\n                  </Grid>\n                </Grid>\n                <Grid container spacing={4} className=\"mb3 lattice-form-band\" alignItems=\"flex-end\">\n                  <Grid className=\"lattice-icon\" item>\n                    <AssignmentTurnedIn />\n                  </Grid>\n                  <p className=\"lattice-form-label mb0 font-gray\">Your skills</p>\n                  <Grid item className=\"lattice-form-input\">\n                    <Autocomplete\n                      multiple\n                      filterSelectedOptions\n                      id=\"tags-outlined\"\n                      options={skills} // TODO: Need to be taken from DB ideally\n                      getOptionLabel={(option) => option.title}\n                      value={profileSkills}\n                      renderInput={(params) => (\n                        <TextField\n                          {...params}\n                          variant=\"outlined\"\n                          label=\"\"\n                          placeholder=\"Skills\"\n                          error={!!errors.skills}\n                          helperText={(errors.skills?.type === `required`) ?\n                            `Please select atleast one` :\n                            `Please select no more than 6`\n                          }\n                        />\n                      )}\n                      onChange={(e, skills) => setValue(`skills`, skills)}\n                    />\n                  </Grid>\n                </Grid>\n                <Grid container spacing={4} className=\"mb3 lattice-form-band\" alignItems=\"flex-end\">\n                  <Grid className=\"lattice-icon\" item>\n                    <AssignmentTurnedIn />\n                  </Grid>\n                  <p className=\"lattice-form-label mb0 font-gray\">Looking For</p>\n                  <Grid item className=\"lattice-form-input\">\n                    <Autocomplete\n                      multiple\n                      id=\"tags-outlined\"\n                      options={skills} // TODO: Need to be taken from DB ideally\n                      getOptionLabel={(option) => option.title}\n                      filterSelectedOptions\n                      value={profileLookingFor}\n                      renderInput={(params) => (\n                        <TextField\n                          {...params}\n                          variant=\"outlined\"\n                          label=\"\"\n                          placeholder=\"Skills\"\n                          error={!!errors.lookingFor}\n                          helperText={(errors.lookingFor?.type === `required`) ?\n                            `Please select atleast one` :\n                            `Please select no more than 3`\n                          }\n                        />\n                      )}\n                      onChange={(e, skills) => setValue(`lookingFor`, skills)}\n                    />\n                  </Grid>\n                </Grid>\n                <Grid container spacing={4} className=\"mb3 lattice-form-band\" alignItems=\"flex-end\">\n                  <Grid item className=\"lattice-icon\">\n                    <SlackIcon />\n                  </Grid>\n                  <p className=\"lattice-form-label mb0 font-gray\">Slack handle</p>\n                  <Grid item className=\"lattice-form-input\">\n                    <TextField\n                      fullWidth\n                      name=\"slack\"\n                      id=\"input-with-icon-grid\"\n                      variant=\"outlined\"\n                      inputRef={register({ required: `This field is required` })}\n                      InputProps={{\n                        startAdornment: <InputAdornment position=\"start\">@</InputAdornment>\n                      }}\n                      error={!!errors.slack}\n                      helperText={errors.slack?.message || `Please provide the handle you have on the MakeUC Slack. Your matches will use this to contact you.`}\n                    />\n                  </Grid>\n                </Grid>\n              </div>\n              <Button\n                type=\"submit\"\n                variant=\"contained\"\n                className=\"center\"\n                color=\"primary\"\n                disabled={isSubmitting}\n              >\n                {\n                  isSubmitting ? <Spinner size=\"25px\" /> : `Save`\n                }\n              </Button>\n              {failedToSubmit &&\n                <Box color=\"error.main\" className=\"mt2\">{failedToSubmit}</Box>\n              }\n            </>\n          }\n        </div>\n      </form>\n      <ConfirmationDialog show={showConfirmationModal} onClose={onModalDismiss} />\n      {redirect && <Redirect to={redirect} />}\n    </Container>\n  );\n};\n","/Users/piyush/RevUC/lattice/src/pages/notifications/Notifications.tsx",["258"],"import React, { useEffect, useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\nimport LaunchIcon from '@material-ui/icons/Launch';\nimport Container from \"@material-ui/core/Container\";\n\nimport { useNotification } from '../../providers/NotificationProvider';\nimport { useProfileList } from '../../providers/ProfileListProvider';\nimport useDialogControl from '../../components/DialogControl.hook';\nimport NotificationDetails from './dialogs/notification-details';\nimport CopiedAlert from './dialogs/copied-alert';\nimport Spinner from '../../components/Spinner';\nimport { NotificationDetails as INotificationDetails } from '../../interfaces/notification';\nimport { HydratedProfile } from '../../interfaces/profile';\n\nconst action = (\n  <Button className=\"font-secondary-dark\" size=\"small\">\n    <LaunchIcon className=\"font-secondary-dark\" />\n  </Button>\n);\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    maxWidth: 600,\n    '& > * + *': {\n      marginTop: theme.spacing(2),\n    },\n  },\n  snackbar: {\n    backgroundColor: '#8174ff',\n    fontFamily: 'Open Sans'\n  }\n}));\n\nexport default function() {\n  const classes = useStyles();\n  const { isLoading, failedToLoad, notifications, getNotifications, readNotifications } = useNotification();\n  const notificationDetailsDialog = useDialogControl();\n  const copiedAlertDialog = useDialogControl();\n  const { skills } = useProfileList();\n  \n  const [ openNotification, setOpenNotification ] = useState<INotificationDetails & { hydratedProfile: HydratedProfile }>();\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => { readNotifications() }, []);\n\n  const openNotificationDetails = (notification: INotificationDetails) => {\n    const profile = notification.to;\n    const profileSkills = skills.filter(skill => profile.skills?.includes(skill.title));\n    const profileLookingFor = skills.filter(skill => profile.lookingFor?.includes(skill.title));\n    const hydratedProfile: HydratedProfile = { ...profile, skills: profileSkills, lookingFor: profileLookingFor };\n\n    setOpenNotification({ ...notification, hydratedProfile });\n    notificationDetailsDialog.open();\n  };\n\n  /* const openCopiedAlert = async ([ content, text ]) => {\n    await navigator.clipboard.writeText(text);\n    copiedAlertDialog.setState([ content, text ]);\n    copiedAlertDialog.open();\n  }; */\n\n  return (\n    <Container className={classes.root + \" nav-bar-margin\"}>\n      {\n        isLoading ?\n          <TextBox>Fetching notifications... <br /> <Spinner /></TextBox> :\n\n        failedToLoad ? \n          <TextBox>\n            <p>Error fetching notifications</p>\n            <Button variant=\"contained\" color=\"primary\" onClick={getNotifications}>Try again</Button>\n          </TextBox> :\n\n        notifications.length ?\n          <div className=\"pa4\">\n            {notifications.map(notification =>\n              <SnackbarContent\n                key={notification.notification.id}\n                className={classes.snackbar}\n                message={`You matched with ${notification.to?.name} ${notification.notification?.read ? `` : `(NEW)`}`}\n                action={action}\n                onClick={() => openNotificationDetails(notification)}\n                style={{ marginBottom: `10px` }}\n              />\n            )}\n          </div> :\n\n          <TextBox>No notifications</TextBox>\n      }\n      {openNotification &&\n        <NotificationDetails\n          show={notificationDetailsDialog.show}\n          onClose={notificationDetailsDialog.dismiss}\n          matchedUser={openNotification.hydratedProfile}\n          // onContactClick={openCopiedAlert}\n        />\n      }\n      \n      <CopiedAlert\n        show={copiedAlertDialog.show}\n        onClose={copiedAlertDialog.dismiss}\n        state={copiedAlertDialog.state}\n      />\n    </Container>\n  );\n};\n\nfunction TextBox({ children }) {\n  return <Container className=\"nav-bar-margin\">\n    <div className=\"bg-white mv3 mv5-ns pa3 ph5-ns br3\">\n      {children}\n    </div>\n  </Container>;\n};\n","/Users/piyush/RevUC/lattice/src/services/AuthService.ts",["259"],"import Axios from 'axios';\nimport { apiHost } from './Api';\n\nconst apiUrl = `${apiHost}/auth`;\n\nexport default {\n\n  async getRegistrantEmail(id: string): Promise<string> {\n    try {\n      const res = await Axios({\n        url: `${apiUrl}/email/${id}`,\n        method: `GET`\n      });\n  \n      return res.data;\n    } catch (err) {\n      throw new Error(err.response.data.message || `Cannot reach server, please try again later`);\n    }\n  },\n\n  async register(registrantId: string, password: string): Promise<string> {\n    try {\n      const res = await Axios({\n        url: `${apiUrl}/register`,\n        method: `POST`,\n        data: { registrantId, password }\n      });\n  \n      return res.data;\n    } catch (err) {\n      throw new Error(err.response.data.message || `Cannot reach server, please try again later`);\n    }\n  },\n\n  async login(email: string, password: string): Promise<string> {\n    try {\n      const res = await Axios({\n        url: `${apiUrl}/login`,\n        method: `POST`,\n        data: { email, password }\n      });\n  \n      return res.data;\n    } catch (err) {\n      throw new Error(err.response?.data.message || `Cannot reach server, please try again later`);\n    }\n  },\n\n  async changePassword(token: string, oldPassword: string, newPassword: string): Promise<void> {\n    try {\n      await Axios({\n        url: `${apiUrl}/password`,\n        method: `PUT`,\n        data: { oldPassword, newPassword },\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n\n      return;\n    } catch (err) {\n      throw new Error(err.response?.data.message || `Cannot reach server, please try again later`);\n    }\n  },\n\n  async sendResetLink(email: string): Promise<void> {\n    try {\n      await Axios({\n        url: `${apiUrl}/reset`,\n        method: `POST`,\n        data: { email }\n      });\n  \n      return;\n    } catch (err) {\n      throw new Error(err.response.data.message || `Cannot reach server, please try again later`);\n    }\n  },\n\n  async getResetInfo(resetToken: string) {\n    try {\n      const res = await Axios({\n        url: `${apiUrl}/reset/${resetToken}`,\n        method: `GET`\n      });\n  \n      return res.data;\n    } catch (err) {\n      throw new Error(err.response.data.message || `Cannot reach server, please try again later`);\n    }\n  },\n\n  async resetPassword(resetToken: string, password: string) {\n    try {\n      await Axios({\n        url: `${apiUrl}/reset`,\n        method: `PUT`,\n        data: { resetToken, password }\n      });\n  \n      return;\n    } catch (err) {\n      throw new Error(err.response.data.message || `Cannot reach server, please try again later`);\n    }\n  }\n};","/Users/piyush/RevUC/lattice/src/services/PushService.ts",["260"],"import Axios from 'axios';\nimport { Subscription } from '../interfaces/notification';\nimport { apiHost } from './Api';\n\nconst apiUrl = `${apiHost}/notification`;\n\nconst urlB64ToUint8Array = (base64String: string) => {\n  const padding = `=`.repeat((4 - (base64String.length % 4)) % 4);\n  const base64 = (base64String + padding).replace(/-/g, `+`).replace(/_/g, `/`);\n  const rawData = atob(base64);\n  const outputArray = new Uint8Array(rawData.length)\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i)\n  };\n  return outputArray;\n};\n\nconst getSubscription = async () => {\n  const registration = await navigator.serviceWorker.ready;\n\n  const existing = await registration.pushManager.getSubscription();\n  if(existing) throw new Error(`Push subscription already exists`);\n\n  const applicationServerKey = urlB64ToUint8Array(\n    `BHCuHf6XCh7_akWexWbU5zQfIg-pfNlXgtBdQXjdT3ERWVbd8SCIAKC-VhBHoKHc8cI9I27dodZF2iZZB9EpOFs`\n  )\n  const options = { applicationServerKey, userVisibleOnly: true }\n  return registration.pushManager.subscribe(options);\n};\n\nconst removeSubscription = async () => {\n  const registration = await navigator.serviceWorker.ready;\n\n  const subscription = await registration.pushManager.getSubscription();\n  if(!subscription) throw new Error(`Push subscription does not exist`);\n\n  return subscription.unsubscribe();\n};\n\nexport default {\n  requestPermission() {\n    return window.Notification.requestPermission();\n  },\n  async subscribe(token: string): Promise<Subscription> {\n    try {\n      const sub = await getSubscription();\n\n      const res = await Axios({\n        url: `${apiUrl}/subscribe`,\n        method: `POST`,\n        data: sub,\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n\n      return res.data;\n    } catch(err) {\n      throw new Error(err.response?.data?.message || err.message);\n    }\n  },\n  async unsubscribe(token: string, id: string) {\n    try {\n      await removeSubscription();\n  \n      await Axios({\n        url: `${apiUrl}/subscribe/${id}`,\n        method: `DELETE`,\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n  \n      return;\n    } catch(err) {\n      throw new Error(err.response?.data?.message || err.message);\n    }\n  }\n};","/Users/piyush/RevUC/lattice/src/services/ProfileService.ts",["261"],"import Axios from 'axios';\nimport { Profile, ScoredProfile } from '../interfaces/profile';\nimport { apiHost } from './Api';\n\nconst apiUrl = `${apiHost}/profile`;\n\nexport default {\n  async getProfiles(token: string): Promise<Array<ScoredProfile>> {\n    try {\n      const res = await Axios({\n        url: `${apiUrl}/list`,\n        method: `GET`,\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n\n      return res.data;\n    } catch (err) {\n      throw new Error(err.response.data.message);\n    }\n  },\n\n  async getProfile(token: string): Promise<Profile> {\n    try {\n      const res = await Axios({\n        url: `${apiUrl}/`,\n        method: `GET`,\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n  \n      return res.data;\n    } catch (err) {\n      throw new Error(err.response.data.message);\n    }\n  },\n\n  async startProfile(token: string): Promise<void> {\n    try {\n      await Axios({\n        url: `${apiUrl}/start`,\n        method: `POST`,\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n  \n      return;\n    } catch (err) {\n      throw new Error(err.response.data.message);\n    }\n  },\n\n  async updateProfile(token: string, profile: Profile): Promise<Profile> {\n    try {\n      const res = await Axios({\n        url: `${apiUrl}/`,\n        method: `PUT`,\n        data: profile,\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n  \n      return res.data;\n    } catch (err) {\n      throw new Error(err.response.data.message);\n    }\n  },\n\n  async setVisible(token: string, visible: boolean): Promise<Profile> {\n    try {\n      const res = await Axios({\n        url: `${apiUrl}/visible`,\n        method: `PUT`,\n        data: { visible },\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n  \n      return res.data;\n    } catch (err) {\n      throw new Error(err.response.data.message);\n    }\n  },\n\n  async getSkills(token: string) {\n    try {\n      const res = await Axios({\n        url: `${apiUrl}/skills`,\n        method: `GET`,\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n\n      return res.data;\n    } catch (err) {\n      throw new Error(err.response.data.message);\n    }\n  },\n\n  async completeTour(token: string, tour: string): Promise<void> {\n    try {\n      await Axios({\n        url: `${apiUrl}/tour/${tour}`,\n        method: `POST`,\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n  \n      return;\n    } catch (err) {\n      throw new Error(err.response.data.message);\n    }\n  }\n};","/Users/piyush/RevUC/lattice/src/services/NotificationService.ts",["262"],"import Axios from 'axios';\nimport { NotificationDetails } from '../interfaces/notification';\nimport { apiHost } from './Api';\n\nconst apiUrl = `${apiHost}/notification`;\n\nexport default {\n  async getNotifications(token: string): Promise<Array<NotificationDetails>> {\n    try {\n      const res = await Axios({\n        url: `${apiUrl}`,\n        method: `GET`,\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n\n      return res.data;\n    } catch (err) {\n      throw new Error(err.response.data.message);\n    }\n  },\n  async readNotifications(token: string): Promise<void> {\n    try {\n      await Axios({\n        url: `${apiUrl}/read`,\n        method: `POST`,\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n\n      return;\n    } catch (err) {\n      throw new Error(err.response.data.message);\n    }\n  }\n};","/Users/piyush/RevUC/lattice/src/services/MatchService.ts",["263"],"import Axios from 'axios';\nimport { Swipe } from '../interfaces/match';\nimport { apiHost } from './Api';\n\nconst apiUrl = `${apiHost}/match`;\n\nexport default {\n  async swipe(token: string, swipe: Pick<Swipe, 'to' | 'like'>) {\n    try {\n      const res = await Axios({\n        url: `${apiUrl}`,\n        method: `POST`,\n        data: swipe,\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n\n      return res.data;\n    } catch (err) {\n      throw new Error(err.response.data.message);\n    }\n  },\n  async reset(token: string): Promise<void> {\n    try {\n      await Axios({\n        url: `${apiUrl}`,\n        method: `DELETE`,\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n\n      return;\n    } catch (err) {\n      throw new Error(err.response.data.message);\n    }\n  }\n};","/Users/piyush/RevUC/lattice/src/layout/Navigation.tsx",[],"/Users/piyush/RevUC/lattice/src/components/PromiseButton.tsx",[],"/Users/piyush/RevUC/lattice/src/components/Spinner.tsx",[],"/Users/piyush/RevUC/lattice/src/pages/auth/dialogs/reset-request.tsx",["264"],"import React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { TextField } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nexport interface ResetRequestForm { email: string }\n\nexport default function({ show, onClose, onSuccess }:\n  { \n    show: boolean,\n    onClose: () => void,\n    onSuccess: (data: ResetRequestForm) => Promise<void>\n  }\n) {\n  const { register, handleSubmit, errors } = useForm<ResetRequestForm>();\n\n  return (\n    <div>\n      <Dialog\n        open={show}\n        onClose={onClose}\n      >\n        <form onSubmit={handleSubmit(onSuccess)}>\n          <DialogTitle>Request Password Reset</DialogTitle>\n          <DialogContent>\n            <TextField\n              autoFocus\n              name=\"email\"\n              label=\"Email\"\n              variant=\"outlined\"\n              type=\"email\"\n              margin=\"normal\"\n              fullWidth\n              inputRef={register({ required: `This field is required` })}\n              error={!!errors.email}\n              helperText={errors.email?.message}\n            />\n          </DialogContent>\n          <DialogActions>\n            <Button type=\"submit\" color=\"primary\">\n              Submit\n            </Button>\n            <Button onClick={onClose} color=\"primary\">\n              Cancel\n            </Button>\n          </DialogActions>\n        </form>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/piyush/RevUC/lattice/src/pages/auth/dialogs/reset-request-alert.tsx",["265"],"import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nexport default function({ show, onClose, error }:\n  { show: boolean, onClose: () => void, error?: Error }\n) {\n  return (\n    <div>\n      <Dialog\n        open={show}\n        onClose={onClose}\n      >\n        <DialogTitle>{error ? `Error` : `Success`}</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            {\n              error ?\n                `There was a problem trying to reset your password - ${error.message}` :\n                `An password reset link has been sent to your email.`\n            }\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={onClose} color=\"primary\">\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/piyush/RevUC/lattice/src/components/DialogControl.hook.tsx",["266"],"import { useState } from 'react';\n\nexport default function<T>(defaultShow = false) {\n  const [ show, setShow ] = useState(defaultShow);\n  const [ state, setState ] = useState<T>();\n  \n  const open = () => setShow(true);\n  const dismiss = () => {\n    setState(undefined);\n    setShow(false);\n  };\n\n  return { show, open, dismiss, state, setState };\n};","/Users/piyush/RevUC/lattice/src/pages/profile/dialogs/profile-save-confirmation.tsx",["267"],"import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nexport default function({ show, onClose }:\n  { show: boolean, onClose: () => void }\n) {\n  return (\n    <div>\n      <Dialog\n        open={show}\n        onClose={onClose}\n      >\n        <DialogTitle>Success</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Your profile was sucessfully updated.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={onClose} color=\"primary\">\n            Next\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/piyush/RevUC/lattice/src/pages/profile/dialogs/change-password.tsx",["268"],"import React, { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { TextField } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Spinner from '../../../components/Spinner';\n\nexport interface ChangePasswordForm {\n  oldPassword: string\n  newPassword: string\n  confirmNewPassword: string\n}\n\nexport default function({ show, onClose, onSuccess }:\n  { show: boolean, onClose: () => void, onSuccess: (data: ChangePasswordForm) => Promise<any> }\n) {\n  const { register, getValues, handleSubmit, errors } = useForm<ChangePasswordForm>();\n\n  const [ isSubmitting, setSubmitting ] = useState(false);\n\n  const onSubmit = async (data: ChangePasswordForm) => {\n    try {\n      setSubmitting(true);\n      await onSuccess(data);\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  return (\n    <div>\n      <Dialog\n        open={show}\n        onClose={onClose}\n      >\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <DialogTitle>Change Password</DialogTitle>\n          <DialogContent>\n            <TextField\n              autoFocus\n              name=\"oldPassword\"\n              label=\"Current password\"\n              variant=\"outlined\"\n              type=\"password\"\n              margin=\"normal\"\n              fullWidth\n              inputRef={register({ required: `This field is required` })}\n              error={!!errors.oldPassword}\n              helperText={errors.oldPassword?.message}\n            />\n            <TextField\n              name=\"newPassword\"\n              label=\"New password\"\n              variant=\"outlined\"\n              type=\"password\"\n              margin=\"normal\"\n              fullWidth\n              inputRef={register({\n                required: `This field is required`,\n                minLength: 6\n              })}\n              error={!!errors.newPassword}\n              helperText={\n                errors.newPassword?.message ||\n                (errors.newPassword?.type === `minLength` && `Passwords should be atleast 6 characters`)\n              }\n            />\n            <TextField\n              name=\"confirmNewPassword\"\n              label=\"Confirm new password\"\n              variant=\"outlined\"\n              type=\"password\"\n              margin=\"normal\"\n              fullWidth\n              inputRef={register({\n                required: `This field is required`,\n                validate: confirm => getValues(`newPassword`) === confirm\n              })}\n              error={!!errors.confirmNewPassword}\n              helperText={\n                errors.confirmNewPassword?.message ||\n                (errors.confirmNewPassword?.type === `validate` && `Passwords do not match`)\n              }\n            />\n          </DialogContent>\n          <DialogActions>\n            <Button type=\"submit\" color=\"primary\"disabled={isSubmitting} >\n              {isSubmitting ? <Spinner size=\"25px\" /> : `Submit`}\n            </Button>\n            <Button onClick={onClose} color=\"primary\">\n              Cancel\n            </Button>\n          </DialogActions>\n        </form>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/piyush/RevUC/lattice/src/pages/profile/dialogs/logout-confirmation.tsx",["269"],"import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport PromiseButton from '../../../components/PromiseButton';\n\nexport default function({ show, onSuccess, onClose }) {\n  return (\n    <div>\n      <Dialog\n        open={show}\n        onClose={onClose}\n      >\n        <DialogTitle>Logout</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Are you sure you want to log out?\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={onClose} color=\"primary\">\n            Cancel\n          </Button>\n          <PromiseButton onClick={onSuccess} color=\"primary\">\n            Yes\n          </PromiseButton>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/piyush/RevUC/lattice/src/tours/ProfileTour.tsx",["270"],"import React from 'react'\nimport TourComponent from './TourComponent';\n\nexport default function() {\n  return <TourComponent name=\"profile\" steps={steps} />;\n}\n\nconst steps = [\n  {\n    selector: '',\n    content: `Welcome to your Lattice profile page. This is the place where you control your profile, settings and visibility on Lattice.`\n  },\n  {\n    selector: '.edit-profile-button',\n    content: `You can hit this button to edit your profile.`\n  },\n  {\n    selector: '.toggle-visibility-button',\n    content: `From here you can control your visibility on Lattice. When you are done looking for teammates, you can mark your profile as not visibile so that you stop receiving matches.`\n  },\n  {\n    selector: '.notification-request-button',\n    content: `We highly recommend that you turn on push notifications so that you are notified as soon as you are matched with another hacker. If you deny the permission to send push notifications, you can only enable that later by going into your browser's settings.`\n  },\n  {\n    selector: '.home-link',\n    content: `When you are satisfied with your settings, you can go back to the home page and start matching with hackers.`\n  }\n];\n","/Users/piyush/RevUC/lattice/src/pages/profile/dialogs/change-password-alert.tsx",["271"],"import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nexport default function({ show, onClose, error }) {\n  return (\n    <div>\n      <Dialog\n        open={show}\n        onClose={onClose}\n      >\n        <DialogTitle>Success</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            {\n              error ?\n                `There was a problem trying to change your password, please try again later.` :\n                `Your password has been successfully changed.`\n            }\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={onClose} color=\"primary\">\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/piyush/RevUC/lattice/src/pages/home/dialogs/toggle-visibility-confirmation.tsx",["272"],"import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport PromiseButton from '../../../components/PromiseButton';\n\nexport default function({ show, onSuccess, onClose }:\n  { show: boolean, onSuccess: () => Promise<any>, onClose: () => void }\n) {\n  return (\n    <div>\n      <Dialog\n        open={show}\n        onClose={onClose}\n      >\n        <DialogTitle>Are you sure</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Mark you profile not visible?\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={onClose} color=\"primary\">\n            Cancel\n          </Button>\n          <PromiseButton onClick={onSuccess} color=\"primary\">\n            Yes\n          </PromiseButton>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/piyush/RevUC/lattice/src/pages/profile/dialogs/toggle-visibility-alert.tsx",["273"],"import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nexport default function({ show, onClose, visible }) {\n  return (\n    <div>\n      <Dialog\n        open={show}\n        onClose={onClose}\n      >\n        <DialogTitle>Success</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Your profile is now {visible ? ` ` : ` not`} visible.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={onClose} color=\"primary\">\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/piyush/RevUC/lattice/src/pages/profile/dialogs/toggle-visibility-confirmation.tsx",["274"],"import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport PromiseButton from '../../../components/PromiseButton';\n\nexport default function({ show, onSuccess, onClose, visible }) {\n  return (\n    <div>\n      <Dialog\n        open={show}\n        onClose={onClose}\n      >\n        <DialogTitle>Are you sure</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Mark you profile {visible ? ` not` : ``} visible?\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={onClose} color=\"primary\">\n            Cancel\n          </Button>\n          <PromiseButton onClick={onSuccess} color=\"primary\">\n            Yes\n          </PromiseButton>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/piyush/RevUC/lattice/src/pages/home/dialogs/toggle-visibility-alert.tsx",["275"],"import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nexport default function({ show, onClose }:\n  { show: boolean, onClose: () => void }\n) {\n  return (\n    <div>\n      <Dialog\n        open={show}\n        onClose={onClose}\n      >\n        <DialogTitle>Success</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Your profile is now not visible.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={onClose} color=\"primary\">\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/piyush/RevUC/lattice/src/pages/home/dialogs/reset-alert.tsx",["276"],"import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nexport default function({ show, onClose }:\n  { show: boolean, onClose: () => void }\n) {\n  return (\n    <div>\n      <Dialog\n        open={show}\n        onClose={onClose}\n      >\n        <DialogTitle>Success</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            All the negative swipes have been reset.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={onClose} color=\"primary\">\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/piyush/RevUC/lattice/src/pages/notifications/dialogs/copied-alert.tsx",["277"],"import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nexport default function({ show, onClose, state }) {\n  if(!state) return null;\n\n  const [ content ] = state;\n\n  return (\n    <div>\n      <Dialog\n        open={show}\n        onClose={onClose}\n      >\n        <DialogTitle>Success</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            {content} copied to clipboard.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={onClose} color=\"primary\">\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/piyush/RevUC/lattice/src/pages/notifications/dialogs/notification-details.tsx",["278"],"import React from 'react';\n// import Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport NotificationTour from '../../../tours/NotificationTour';\nimport { HydratedProfile } from '../../../interfaces/profile';\n\nexport default function ({ show, onClose, matchedUser, onContactClick }:\n  { show: boolean, onClose: () => void, matchedUser: HydratedProfile, onContactClick?: () => void }\n) {\n  const { skills, name, idea, lookingFor, /* email, slack */ } = matchedUser;\n\n  const skillRows = [skills?.slice(0, 3), skills?.slice(3, 6)];\n\n  return (\n    <div>\n      <Dialog\n        open={show}\n        onClose={onClose}\n      >\n        <div style={{ width: `300px` }}>\n          {\n            !!name &&\n            <div className=\"font-opensans\" style={{ textAlign: `center` }}>\n              <h2 className=\"name\">\n                <small>You matched with</small> <br /> {name}!\n              </h2>\n              <h3>Project Idea</h3>\n              <div\n                style={{\n                  marginTop: `-5px`,\n                  marginLeft: `15px`,\n                  marginRight: `15px`,\n                  marginBottom: `35px`,\n                  borderRadius: `10px`,\n                  paddingBottom: `0px`,\n                }}\n              >\n                <p\n                  style={{\n                    fontSize: `13px`,\n                  }}\n                >\n                  {idea}\n                </p>\n              </div>\n              <h3>Offering</h3>\n              {skillRows.map(\n                (row, index) =>\n                  !!row.length && (\n                    <div\n                      key={index}\n                      style={{\n                        padding: `25px`,\n                        paddingBottom: `10px`,\n                        marginTop: `-45px`,\n                        marginLeft: `15px`,\n                        marginRight: `15px`,\n                        display: `flex`,\n                        borderRadius: `10px`,\n                      }}\n                    >\n                      {row.map((skill) => (\n                        <i\n                          key={skill.title}\n                          className={skill.icon}\n                          style={{\n                            padding: `10px`,\n                            fontSize: `50px`,\n                          }}\n                        />\n                      ))}\n                    </div>\n                  )\n              )}\n              <h3>Looking For</h3>\n              <div\n                style={{\n                  padding: `25px`,\n                  marginTop: `-45px`,\n                  marginLeft: `15px`,\n                  marginRight: `15px`,\n                  display: `flex`,\n                  borderRadius: `10px`,\n                }}\n              >\n                {lookingFor.map((look) => (\n                  <i\n                    key={look.title}\n                    className={look.icon}\n                    style={{\n                      padding: `10px`,\n                      fontSize: `50px`,\n                    }}\n                  ></i>\n                ))}\n              </div>\n              {/*\n                <Button\n                  className=\"slack-button\"\n                  fullWidth={true}\n                  color=\"primary\"\n                  onClick={() => onContactClick([`Slack handler`, `@${slack}`])}\n                >Slack: @{slack}</Button>\n\n                <Button\n                  className=\"email-button\"\n                  fullWidth={true}\n                  color=\"primary\"\n                  onClick={() => onContactClick([`Email`, email])}\n                >Email: {email}</Button>\n              */}\n            </div>\n          }\n        </div>\n        <NotificationTour />\n      </Dialog>\n    </div>\n  );\n};\n","/Users/piyush/RevUC/lattice/src/pages/auth/dialogs/reset-alert.tsx",["279"],"import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nexport default function({ show, onClose }:\n  { show: boolean, onClose: () => void }\n) {\n  return (\n    <div>\n      <Dialog\n        open={show}\n        onClose={onClose}\n      >\n        <DialogTitle>Success</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Your password has been successfully reset. You can now login with the new password.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={onClose} color=\"primary\">\n            Done\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/piyush/RevUC/lattice/src/pages/home/dialogs/reset-confirmation.tsx",["280"],"import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport PromiseButton from '../../../components/PromiseButton';\n\nexport default function({ show, onSuccess, onClose }:\n  { show: boolean, onSuccess: () => Promise<any>, onClose: () => void }\n) {\n  return (\n    <div>\n      <Dialog\n        open={show}\n        onClose={onClose}\n      >\n        <DialogTitle>Are you sure</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Reset all the negative swipes?\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={onClose} color=\"primary\">\n            Cancel\n          </Button>\n          <PromiseButton onClick={onSuccess} color=\"primary\">\n            Yes\n          </PromiseButton>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/piyush/RevUC/lattice/src/pages/home/Deck.tsx",[],"/Users/piyush/RevUC/lattice/src/tours/ResetTour.tsx",["281"],"import React from 'react'\nimport TourComponent from './TourComponent';\n\nexport default function() {\n  return <TourComponent name=\"reset\" steps={steps} />;\n}\n\nconst steps = [\n  {\n    selector: '',\n    content: `Hello there! It seems like you have seen all the hackers' profiles that have registered so far. So now, there are three things you can do.`\n  },\n  {\n    selector: '.reset-button',\n    content: `If you click on this button, all the profiles that you swiped left on will be available to you again.`\n  },\n  {\n    selector: '.mark-not-visibile-button',\n    content: `If you have already found a team for the hackathon, you can click on this button to mark your profile as not visible, so that you don't get any further matches.`\n  },\n  {\n    selector: '.wait-text',\n    content: `Hackers will keep on flowing into Lattice until the day of the hackathon, so you can simply wait for more hackers to join Lattice.`\n  }\n];\n","/Users/piyush/RevUC/lattice/src/tours/HomeTour.tsx",["282"],"import React from 'react';\nimport TourComponent from './TourComponent';\n\nexport default function() {\n  return <TourComponent name=\"home\" steps={steps} />\n}\n\nconst steps = [\n  {\n    selector: '',\n    content: `This is the Lattice homepage. Here you can find other enthusiastic hackers and team up with them to build awesome stuff.`\n  },\n  {\n    selector: '.hacker-profile-card:last-of-type',\n    content: `This is a hacker profile card. We automatically sort these profiles based on the skills you have and are looking for.`\n  },\n  {\n    selector: '.hacker-profile-card:last-of-type',\n    content: `If you are familiar with Tinder, you already know what to do. If not, here it is: you can swipe these cards either left or right.`\n  },\n  {\n    selector: '.hacker-profile-card:last-of-type',\n    content: `Swiping left means that you are not interested in teaming up with this hacker. Swiping right means that you like this hacker's profile and are interested in teaming up with them.`\n  },\n  {\n    selector: '.notifications-link',\n    content: `If you and another hacker both swipe right on each other, it's a match! You both will get a notification. You can check out all your match notifications here.`\n  },\n  {\n    selector: '.profile-link',\n    content: `You can always go here and modify your profile.`\n  },\n  {\n    selector: '.deck',\n    content: `That is all I have for you today. Hope you have a great time at MakeUC. Happy swiping!`\n  }\n];\n","/Users/piyush/RevUC/lattice/src/services/Api.ts",["283"],"/Users/piyush/RevUC/lattice/src/tours/NotificationTour.tsx",["284"],"import React from 'react'\nimport TourComponent from './TourComponent';\n\nexport default function() {\n  return <TourComponent name=\"notification\" steps={steps} />;\n}\n\nconst steps = [\n  {\n    selector: '',\n    content: `Congratulations on you first match! This is the profile of the hacker you matched with, which means that you both are interested in teaming up with each other.`\n  },\n  {\n    selector: '.slack-button',\n    content: `This is the username of this hacker on the MakeUC Slack workspace. You can use this to find and reach out to the hacker. Click on the button to automatically copy the handler into your clipboard.`\n  },\n  {\n    selector: '.email-button',\n    content: `If for some reason you could not get in touch with the hacker on the MakeUC Slack, you can always try the old-fashioned email. Click on the button to automatically copy the email into your clipboard.`\n  }\n];\n","/Users/piyush/RevUC/lattice/src/tours/TourComponent.tsx",["285"],"import React, { useState } from 'react'\nimport Tour from 'reactour'\nimport { useProfile } from '../providers/ProfileProvider';\n\nexport default function({ name, steps }) {\n  const { profile, completeTour } = useProfile();\n  const [ isOpen, setOpen ] = useState(true);\n\n  const onTourComplete = async () => {\n    setOpen(false);\n    await completeTour(name);\n  };\n\n  const showTour = !profile?.completedTours?.includes(name);\n\n  return showTour ?\n    <Tour\n      steps={steps}\n      isOpen={isOpen}\n      onRequestClose={onTourComplete}\n    /> : null\n};\n","/Users/piyush/RevUC/lattice/src/pages/home/Card.tsx",[],"/Users/piyush/RevUC/lattice/src/components/Wave.tsx",[],{"ruleId":"286","replacedBy":"287"},{"ruleId":"288","replacedBy":"289"},{"ruleId":"290","severity":1,"message":"291","line":28,"column":1,"nodeType":"292","endLine":170,"endColumn":2},{"ruleId":"290","severity":1,"message":"291","line":25,"column":1,"nodeType":"292","endLine":175,"endColumn":2},{"ruleId":"290","severity":1,"message":"291","line":20,"column":1,"nodeType":"292","endLine":58,"endColumn":2},{"ruleId":"290","severity":1,"message":"291","line":20,"column":1,"nodeType":"292","endLine":162,"endColumn":2},{"ruleId":"290","severity":1,"message":"291","line":27,"column":1,"nodeType":"292","endLine":240,"endColumn":2},{"ruleId":"290","severity":1,"message":"291","line":36,"column":1,"nodeType":"292","endLine":108,"endColumn":2},{"ruleId":"290","severity":1,"message":"293","line":6,"column":1,"nodeType":"292","endLine":106,"endColumn":3},{"ruleId":"290","severity":1,"message":"293","line":40,"column":1,"nodeType":"292","endLine":79,"endColumn":3},{"ruleId":"290","severity":1,"message":"293","line":7,"column":1,"nodeType":"292","endLine":121,"endColumn":3},{"ruleId":"290","severity":1,"message":"293","line":7,"column":1,"nodeType":"292","endLine":38,"endColumn":3},{"ruleId":"290","severity":1,"message":"293","line":7,"column":1,"nodeType":"292","endLine":39,"endColumn":3},{"ruleId":"290","severity":1,"message":"291","line":12,"column":1,"nodeType":"292","endLine":55,"endColumn":2},{"ruleId":"290","severity":1,"message":"291","line":9,"column":1,"nodeType":"292","endLine":36,"endColumn":2},{"ruleId":"290","severity":1,"message":"291","line":3,"column":1,"nodeType":"292","endLine":14,"endColumn":2},{"ruleId":"290","severity":1,"message":"291","line":9,"column":1,"nodeType":"292","endLine":32,"endColumn":2},{"ruleId":"290","severity":1,"message":"291","line":17,"column":1,"nodeType":"292","endLine":101,"endColumn":2},{"ruleId":"290","severity":1,"message":"291","line":10,"column":1,"nodeType":"292","endLine":34,"endColumn":2},{"ruleId":"290","severity":1,"message":"291","line":4,"column":1,"nodeType":"292","endLine":6,"endColumn":2},{"ruleId":"290","severity":1,"message":"291","line":9,"column":1,"nodeType":"292","endLine":34,"endColumn":2},{"ruleId":"290","severity":1,"message":"291","line":10,"column":1,"nodeType":"292","endLine":36,"endColumn":2},{"ruleId":"290","severity":1,"message":"291","line":9,"column":1,"nodeType":"292","endLine":30,"endColumn":2},{"ruleId":"290","severity":1,"message":"291","line":10,"column":1,"nodeType":"292","endLine":34,"endColumn":2},{"ruleId":"290","severity":1,"message":"291","line":9,"column":1,"nodeType":"292","endLine":32,"endColumn":2},{"ruleId":"290","severity":1,"message":"291","line":9,"column":1,"nodeType":"292","endLine":32,"endColumn":2},{"ruleId":"290","severity":1,"message":"291","line":9,"column":1,"nodeType":"292","endLine":34,"endColumn":2},{"ruleId":"290","severity":1,"message":"291","line":7,"column":1,"nodeType":"292","endLine":119,"endColumn":2},{"ruleId":"290","severity":1,"message":"291","line":9,"column":1,"nodeType":"292","endLine":32,"endColumn":2},{"ruleId":"290","severity":1,"message":"291","line":10,"column":1,"nodeType":"292","endLine":36,"endColumn":2},{"ruleId":"290","severity":1,"message":"291","line":4,"column":1,"nodeType":"292","endLine":6,"endColumn":2},{"ruleId":"290","severity":1,"message":"291","line":4,"column":1,"nodeType":"292","endLine":6,"endColumn":2},{"ruleId":"294","severity":1,"message":"295","line":1,"column":7,"nodeType":"296","messageId":"297","endLine":1,"endColumn":10},{"ruleId":"290","severity":1,"message":"291","line":4,"column":1,"nodeType":"292","endLine":6,"endColumn":2},{"ruleId":"290","severity":1,"message":"291","line":5,"column":1,"nodeType":"292","endLine":22,"endColumn":2},"no-native-reassign",["298"],"no-negated-in-lhs",["299"],"import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","Assign object to a variable before exporting as module default","@typescript-eslint/no-unused-vars","'env' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]